AccessManager	  La classe AccessManager interagisce con le classi di gestione del database  La classe AccessManager non ha dipendenze  author Federico Cinque   Costruttore di default della classe AccessManager 
controllaAccesso	  Metodo che permette di controllare la correttezza della login e della   password di un accesso invocando il relativo metodo della classe db  param login Stringa che viene usata come login  param password Stringa che viene usata come password  return True se l'accesso è presente, False altrimenti  throws DbException   Metodo che permette di controllare la correttezza della login e della   password di un accesso per garantire l'apertura di una sessione autenticata  param login Stringa che viene usata come login  param password Stringa che viene usata come password  return True se l'accesso è presente, False altrimenti  throws DbException 
controllaLogin	  Metodo che permette di controllare l'esistenza della login   invocando il relativo metodo della classe db  param login Stringa che viene usata come login  return True se la login è presente, False altrimenti  throws DbException   Metodo che permette di controllare lesistenza della login   param login Stringa che viene usata come login  return True se la login è presente, False altrimenti  throws DbException 
getAccesso	  Metodo che restituisce un accesso invocando il relativo metodo della classe db  param login Stringa che viene usata come login  return Restituisce un oggetto di tipo Accesso  throws DbException   Metodo che restituisce un accesso  param log Stringa che viene usata come login  return Restituisce un oggetto di tipo Accesso  throws DbException 
inserisciAccesso	  Metodo che inserisce un accesso all'interno del db   invocando il relativo metodo della classe db  param ac Oggetto di tipo Accesso  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException   Metodo che inserisce un accesso all'interno del db  param a Oggetto di tipo Accesso  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException 
eliminaAccesso	  Metodo che elimina un accesso  dal db invocando il relativo metodo della classe db  param login Stringa che viene usata come login  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException   Metodo che elimina un accesso  dal db  param log Stringa che viene usata come login  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException 
getAccessi	  Metodo che restituisce tutti gli accessi memorizzati   invocando il relativo metodo della classe db  return Restituisce una Collection di Accessi  throws DbException   Metodo che restituisce tutti gli accessi memorizzati  return Restituisce una Collection di Accessi  throws DbException 
Accesso	  La classe Accesso permette la gestione degli accessi  La classe Accesso non ha dipendenze  author Federico Cinque   Costruttore vuoto della classe Accesso   Costruttore della classe Accesso  param Login  param Password  param Tipo 
Login	  Metodo che restituisce una login  return Login   Metodo che imposta una login  param login   Metodo che restituisce la login dell'impiegato  return Login   Metodo che imposta la login dell'impiegato  param login   Metodo che restituisce la login dell'impiegato  return Login   Metodo che imposta la login dell'impiegato  param login 
Password	  Metodo che restituisce una password  return Password   Metodo che imposta una password  param password 
Tipo	  Metodo che restituisce il tipo di utente che accede  return Tipo   Metodo che imposta il tipo di utente che accede   param tipo 
toString	  Metodo che converete in una stringa le informazioni di un accesso  return String   Metodo che converete in una stringa le informazioni di un accesso  return String   Metodo che converete in una stringa le informazioni di un accesso  return String 
AdminManager	  La classe AdminManager interagisce con le classi di gestione del database  La classe AdminManager non ha dipendenze  author Federico Cinque   Costruttore di default della classe AdminManager 
modificaAdmin	  Metodo che modifica un amministratore  invocando il relativo metodo della classe db  param matricola la stringa che identifica l'amministratore  param newAdmin Amministratore con i dati aggiornati  return True se è stato effettuato un inserimento nel db, False altrimenti 
ricercaAdminByMatricola	  Metodo che restituisce un amministratore  invocando il relativo metodo della classe db  param matricola stringa che viene utilizzato come matricola dell'amministratore  return Restituisce un oggetto di tipo Amministratore  throws DbException 
inserisciAdmin	  Metodo che inserisce un amministratore all'interno del db  invocando il relativo metodo della classe db  param newAdmin Oggetto di tipo Amministratore  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException 
eliminaAmministratore	  Metodo che elimina un Amministratore  dal db  invocando il relativo metodo della classe db  param matricola l'intero che viene utilizzato come matricola  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException   Metodo che elimina un Amministratore  dal db  param matr l'intero che viene utilizzato come matricola  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException 
getAmministratoreByLogin	  Metodo che restituisce un amministratore  invocando il relativo metodo della classe db  param login stringa che viene utilizzata come login dell'amministratore  return Restituisce un oggetto di tipo amministratore  throws DbException   Metodo che restituisce un amministratore  param log stringa che viene utilizzata come login dell'amministratore  return Restituisce un oggetto di tipo amministratore  throws DbException 
getAmministratoreByName	 Metodo che restituisce un insieme di amministratori  invocando il relativo metodo della classe db  param nomeAmm stringa che viene utilizzata come nome dell'amministratore  param cognAmm stringa che viene utilizzata come cognome dell'amministratore  return Restituisce una Collection di Amministratori  throws DbException  Metodo che restituisce un insieme di amministratori  param nomeImp stringa che viene utilizzata come nome dell'amministratore  param cognImp stringa che viene utilizzata come cognome dell'amministratore  return Restituisce una Collection di Amministratori  throws DbException 
getAmministratori	  Metodo che restituisce tutti gli amministratori memorizzati  return Restituisce una Collection di Amministratori  throws DbException   Metodo che restituisce tutti gli amministratori memorizzati  return Restituisce una Collection di Amministratori  throws DbException 
Amministratore	  La classe Amministratore permette la gestione degli amministratori  La classe Amministratore non ha dipendenze  author Federico Cinque   Costruttore vuoto della classe Amministratore   Costruttore della classe Amministratore  param Nome  param Cognome  param Matricola  param Email  param Login 
Nome	  Metodo che restituisce il nome dell'impiegato  return Nome   Metodo che imposta il nome dell'impiegato  param nome   Metodo che restituisce il nome dell'impiegato  return Nome   Metodo che imposta il nome dell'impiegato  param nome 
Cognome	  Metodo che restituisce il cognome dell'impiegato  return Cognome   Metodo che imposta il cognome dell'impiegato  param cognome   Metodo che restituisce il cognome dell'impiegato  return Cognome   Metodo che imposta il cognome dell'impiegato  param cognome 
Matricola	  Metodo che restituisce la matricola dell'impiegato  return Matricola   Metodo che imposta  la matricola dell'impiegato  param matricola   Metodo che restituisce la matricola dell'impiegato  return Matricola   Metodo che imposta  la matricola dell'impiegato  param matricola 
Email	  Metodo che restituisce l'e-mail dell'impiegato  return Email   Metodo che imposta l'e-mail dell'impiegato  param email   Metodo che restituisce l'e-mail dell'impiegato  return Email   Metodo che imposta l'e-mail dell'impiegato  param email 
CartaIdentita	  è un JavaBean che gestisce i metodi di settaggio  e restituzione degli attributi della carta  di identità di un cittadino  author Francesco    Costruttore di default vuoto   oggetto che viene restituito dal database  param cod_carta  param citt  param res  param via  param stciv  param prof  param stat  param cap  param eyes  param sp  param dr  param ds  param validEsp  param num_civ public class CartaIdentita {  crea la carta di identità del cittadino che si è   registrato nel sistema comunale prendendo dalla classe  cittadino le informazioni necessarie per la creazione  del documento di riconoscimento public class CartaIdentita {
Numero	  rappresenta il codice della carta di identità  che viene inserito dall'impiegato   il codice univoco della carta di identità richiesta dal cittadino, viene   inserito dall'impiegato all'atto della creazione cartacea del documento e nel momento  in cui le informazioni devono essere mantenute nel database.   
Cittadinanza	  assegno la carta di identità che sto creando al cittadino  che ne ha fatto richiesta e che è presente all'interno del  database comunale 
CIManager	  La classe CIManager interagisce con le classi di gestione del database  La classe CIManager non ha dipendenze  author Federico Cinque   Costruttore di default della classe CIManager 
getCartaByNumero	  Metodo che permette la ricerca di una carta d'identita tramite il suo numero  invocando il relativo metodo della classe db  param cod il numero della carta d'identità del cittadino.  return l'oggetto di tipo CartaIdentità associata al numero passato come parametro  throws DbException 
Cittadino	  è un JavaBean che gestisce i metodi   get e set degli attributi di un Cittadino  author Francesco    costruttore di default vuoto   get e set degli attributi di un Cittadino  costruttore parametrico che crea l'oggetto  cittadino con i dati inseriti da quest'ultimo   all'atto della registrazione nel sistema comunale 
CittadinoManager	  La classe CittadinoManager interagisce con le classi di gestione del database  La classe CittadinoManager non ha dipendenze  author Federico Cinque   Costruttore di default della classe CIManager 
getCittadinoByLogin	  Metodo che permette la ricerca di un cittadino tramite la sua login  invocando il relativo metodo della classe db  param login è la login in base alla quale si vuole effettuare la ricerca  return l'oggetto di tipo cittadino  throws DbException 
modificaLogin	  Metodo che permette la modifica della login per uno specifico cittadino  invocando il relativo metodo della classe db  param idCitt è l'id del cittadino  param newLogin è la nuova login del cittadino  return true se l'operazione è andata a buon fine, flase altrimenti   Metodo che permette la modifica della login per uno specifico cittadino. (aggiornamento del db)  param idC è l'id del cittadino  param newLogin è la nuova login del cittadino  return true se l'operazione è andata a buon fine 
modificaEmail	  Metodo che permette la modifica dell'indirizzo e-mail di uno specifico cittadino  invocando il relativo metodo della classe db  param idCittadino è l'identificativo del cittadino  param email è la nuova mail da assegnare al cittadino  return true se l'operazione è eseguita con successo, flase altrimenti  throws DbException 
inserisciCittadino	  Metodo che permette di inserire un nuovo cittadino  invocando il relativo metodo della classe db  param cittadino è l'istanza di cittadino  return l'id del cittadino inserito.  throws DbException 
ricercaCittadino	  Metodo che permette la ricerca di un insieme di cittadini in base al loro nome e cognome  invocando il relativo metodo della classe db  param nome parametro su cui effettuare la ricerca  param cognome parametro su cui effettuare la ricerca  return una collection di cittadini con il nome e il cognome passato come parametro  throws DbException 
cancellaCittadino	  Metodo che permette la cancellazione di un cittadino  invocando il relativo metodo della classe db  param idCitt è l'identificativo del cittadino  return true se l'operazione è eseguita con successo, flase altrimenti  throws DbException   Metodo che permette la cancellazione di un cittadino. (aggiornamento del db)  param idCitt è l'identificativo del cittadino  return true se l'operazione è eseguita con successo  throws DbException 
getCittadinoById	  Metodo che permette la ricerca di un cittadino tramite il suo id  invocando il relativo metodo della classe db  param idCitt è l'identificativo del cittadino  return oggetto di tipo cittadino con id uguale a quello passato come parametro  throws DbException 
modificaNucleoFamiliare	  Metodo che modifica il nucleo familiare del cittadino dato il suo id  invocando il relativo metodo della classe db  param idCitt è l'id del cittadino  param newid è l'id del nuovo nucleo familiare del cittadino  return true se l'operazione è eseguita con successo, flase altrimenti  throws DbException 
modificaNome	  Metodo che permette la modifica del nome di uno specifico cittadino  invocando il relativo metodo della classe db  param idCitt è l'identificativo del cittadino  param nome è il nuovo nome da assegnare al cittadino  return true se l'operazione è eseguita con successo, flase altrimenti  throws DbException 
modificaCognome	  Metodo che permette la modifica del cognome di uno specifico cittadino  invocando il relativo metodo della classe db  param idCitt è l'identificativo del cittadino  param cognome è il nuovo cognome da assegnare al cittadino  return true se l'operazione è eseguita con successo, flase altrimenti  throws DbException 
Comune	  La classe Comune permette la comunicazione con gli altri comuni  author Antonio Leone  version 1.0    Costruttore di default   Costruttore parametrico  param n nome del comune  param i indirizzo ip del comune 
getNome	  Preleva il nome del comune  return Restituisce una stringa che contiene il nome del comune 
setNome	  Setta il nome del comune  param n la stringa che contiene il nuovo nome del comune  return Restituisce il nuovo nome del comune 
getIndirizzoId	  Preleva l'indirizo ip del comune  return Restituisce una stringa che contiene l'indirizzo ip del comune 
setIndirizzoId	  Setta l'indirizzo ip del comune  param n la stringa che contiene il nuovo indirizzo ip del comune  return Restituisce il nuovo indirizzo ip del comune 
ControllerFiles	  La classe ControllerFiles gestisce l'upload di un file  La classe non ha nessuna dipendenza  author Francesco Odierna   La classe ControllerFiles gestisce l'upload di un file  La classe ControllerFiles gestisce l'upload di un file  La classe ControllerFiles gestisce l'upload di un file  La classe ControllerFiles gestisce l'upload di un file  La classe ControllerFiles gestisce l'upload di un file  La classe ControllerFiles gestisce l'upload di un file  La classe ControllerFiles gestisce l'upload di un file  La classe ControllerFiles gestisce l'upload di un file
DbAccesso	  La classe DbAccesso si occupa di gestire le connessioni al db  per consentire gli accessi.  author Antonio Leone  version 1.0 
modificaAccesso	  Metodo che modifica un accesso  param log la login che identifica un accesso  param a Accesso con i dati aggiornati  return True se è stato effettuata la modifica nel db, False altrimenti 
DbAmministratore	  La classe DbAmministratore si occupa di gestire le connessioni al db  author Antonio Leone  version 1.0 
inserisciAmministratore	  Metodo che inserisce un amministratore all'interno del db  param i Oggetto di tipo Amministratore  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException 
getAmministratoreByMatricola	  Metodo che restituisce un amministratore  param matrImp stringa che viene utilizzato come matricola dell'amministratore  return Restituisce un oggetto di tipo Amministratore  throws DbException 
modificaAmministratore	  Metodo che modifica un amministratore  param matr la stringa che identifica l'amministratore  param a Amministratore con i dati aggiornati  return True se è stato effettuata una modifica nel db, False altrimenti 
DbCambioResidenza	  Classe che si occupa di gestire le connessioni con il database   e di schermare le servet con il DBMS.  author Michelangelo Cianciulli  
changeResidence	  Metodo che permette la cancellazione della carta d'identità  del cittadino nel   momento in cui esso cambia residenza verso un comune esterno (aggiornamento del db)  param cod è il numero della carta d'identitÃ  di chi ha chiesto il cambio di residenza verso un comune esterno  return true se l'operazione è eseguita con successo  throws DbException   Metodo che permette l'aggiornamento della residenza salvata nella carta d'identitÃ  del cittadino che ha effettuato un cambio  di residenza nello stesso comune in cui attualmente risiede.(aggiornamento del db)  param cod è il numero della carta d'identitÃ   param v è la nuova via in cui andrÃ  a risiedere il cittadino  param nc è il nuovo numero civico dell'abitazione del cittadino  return l'oggetto CartaIdentità  aggiornato   throws DbException 
DbCartaIdentita	  Classe che si occupa di gestire le connessioni con   il database e di schermare le servlet dal DBMS.  author Michelangelo Cianciulli  
ricercaCartaIdentitaByNumero	  Metodo che permette la ricerca di una carta d'identità tramite il suo numero.  param cod è il numero della carta d'identità  del cittadino.  return l'oggetto di tipo CartaIdentità  associata al numero passato come parametro  throws DbException 
cancellaCartaIdentita	  Metodo che permette la cancellazione di una carta d'identità . (aggiornamento del db)  param cod è¨ il codice della carta d'identità  che si intende cancellare  return true se l'operazione è andata a buon fine  throws DbException 
registraCartaIdentita	  Metodo che permette la registrazione di una nuova carta d'identità all'interno del database  param c è l'oggetto di tipo carta d'identità  return true se l'operazione è andata a buon fine  throws DbException 
modificaViaCartaIdentita	  Metodo che permette la modifica della via in una specifica carta d'identità . (aggiornamento del db)  param cod è il numero della carta d'identità    param v è la nuova via da registrare nella carta d'identità   return true se l'operazione è eseguita con successo  throws DbException 
modificaNumeroCivicoCartaIdentita	  Metodo che permette la modifica del numero civico in una specifica carta d'identità . (aggiornamento del db)  param cod è il numero della carta d'identità  param nc è il nuovo numero civico  return true se l'operazione è eseguita con successo  throws DbException 
modificaResidenzaCartaIdentita	  Metodo che permette la modifica della residenza (via e numero civio) in una specifica carta d'identità . (aggiornamento del db)   param via è la nuova via da registrare nella carta d'identità   param nc è il numero civico da registrare nella carta d'identità  return true se l'operazione è eseguita con successo  throws DbException 
modificaDataRilascioCartaIdentita	  Metodo che permette la modifica della data di rilascio di una specifica carta d'identità . (aggiornamento del db)  param cod è il numero della carta d'identità   param d è la nuova data di rilascio della carta d'identità   return true se l'operazione è eseguita con successo  throws DbException 
modificaDataScadenzaCartaIdentita	  Metodo che permette la modifica della data di scadenza per una specifica carta d'identità . (aggiornamento del db)  param cod è il numero della carta d'identità   param d è la nuova data di scadenza  return true se l'operazione è eseguita con successo  throws DbException 
modificaValidaEspatrio	  Metodo che permette la modifica della validità per l'espatrio di una specifica carta d'identità . (aggiornamento del db)  param cod è il numero della carta d'identità   param esp è il valore booleano che indica la validità per l'espatrio per la specifica carta d'identità   return true se l'operazione è eseguita con successo  throws DbException 
ricercaCartaIdentitaByProprietario	  Metodo che permette la ricerca di una carta d'identità a partire dall'id del proprietario  param idC è l'id del cittadino  return l'oggetto di tipo CartaIdentita dello specifico cittadino.  throws DbException 
DbCittadino	   Classe che si occupa di gestire le connessioni con il database   e di schermare le servet con il DBMS.    author Michelangelo Cianciulli public class DbCittadino public class DbCittadino public class DbCittadino 
registraCittadino	  Metodo che permette di registrare un nuovo cittadino. (aggiornamento del db)  param citt è l'istanza di cittadino  return l'id del cittadino inserito.  throws DbException 
modificaNomeCittadino	  Metodo che permette la modifica del nome di uno specifico cittadino. (aggiornamento del db)  param idCitt è l'identificativo del cittadino  param newname il nuovo nome da assegnare al cittadino  return true se l'operazione è eseguita con successo  throws DbException 
modificaCognomeCittadino	  Metodo che permette la modifica del cognome di uno specifico cittadino. (aggiornamento del db)  param idCitt è l'identificativo del cittadino  param newsurname è il nuovo cognome da assegnare al cittadino  return true se l'operazione è eseguita con successo  throws DbException 
modificaCodiceFiscaleCittadino	  Metodo che permette la modifica del codice fiscale di uno specifico cittadino. (aggiornamento del db)  param idCitt è l'identificativo del cittadino  param newcf è il nuovo codice fiscale da assegnare al cittadino  return true se l'operazione è eseguita con successo  throws DbException 
modificaEmailCittadino	  Metodo che permette la modifica dell'indirizzo e-mail di uno specifico cittadino. (aggiornamento del db)  param idCitt è l'identificativo del cittadino  param newmail è la nuova mail da assegnare al cittadino  return true se l'operazione è eseguita con successo  throws DbException 
modificaAdvertise	  Metodo che permette la modifica del campo advertise di uno specifico cittadino. (aggiornamento del db)  param idCitt è l'identificativo del cittadino  return true se l'operazione è eseguita con successo  throws DbException 
getCittadinoByCodice	  Metodo che permette la ricerca di un cittadino tramite il suo id.  param idCitt è l'identificativo del cittadino  return oggetto di tipo cittadino con id uguale a quello passato come parametro  throws DbException 
getCittadinoByName	  Metodo che permette la ricerca di un insieme di cittadini in base al loro nome e cognome.  param name parametro su cui effettuare la ricerca  param surname parametro su cui effettuare la ricerca  return una collection di cittadini con il nome e il cognome passato come parametro  throws DbException 
connection	if(rs.next()){String l = rs.getString("login");stmt = connection.prepareStatement("UPDATE accesso SET login = ? WHERE login = ?");stmt.setString(1, newLogin);stmt.setString(2, l);  Metodo che permette la ricerca di un cittadino tramite la sua login.  param log è la login in base alla quale si vuole effettuare la ricerca  return l'oggetto di tipo cittadino  throws DbException   Metodo privato che ritorna l'id dell'ultimo cittadino inserito.  return l'id più alto della tabella cittadino  throws DbException   Metodo che permette di conoscere l'id del cittadino a partire dai suoi dati anagrafici (codice fiscale,cognome,nome)  param cf è il codice fiscale parametro per la ricerca  param surname è il cognome parametro per la ricerca  param name è il nome parametro per la ricerca  return l'id del cittadino se ok, -1 se la ricerca non ha successo   Metodo che permette la ricerca del codice fiscale del cittadino a partire dal suo ID  param id è l'id del cittadino  return il codice fiscale del cittadino   Metodo che modifica il nucleo familiare del cittadino dato il suo id  param idCitt è l'id del cittadino  param newnucleo è il nuovo nucleo familiare del cittadino  return true se l'operazione è eseguita con successo  throws DbException 
DbComune	  La classe DbComune si occupa di gestire le connessioni al db  author Antonio Leone  version 1.0 
inserisciComune	  Metodo che inserisce un comune all'interno del db  param c oggetto di tipo Comune  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException 
eliminaComune	  Metodo che elimina un comune dal db  param nome che identifica il comune  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException 
getComuneByName	  Metodo che restituisce un comune  param nome la stringa che rappresenta il nome del comune  return Restituisce un oggetto di tipo Comune  throws DbException 
DbConnection	   Questa classe fornisce un pool di connesione  author Antonio Leone   Questa porzione di codice crea un pool di connessione e definisce i db properties 
getConnection	  Ritorna una connessione al db, se non è già disponibile ne viene creata una nuova  return una connessione al db  throws SQLException  
loadDbProperties	  Carica i db properties  throws IOException 
closePool	  Metodo che chiude il pool di connessione 
DbException	  La classe DbException viene lanciata quando si verifica un eccezione legata al db  author Antonio Leone  version 1.0 
DbImpiegato	  La classe DbImpiegato si occupa di gestire le connessioni al db  author Antonio Leone  version 1.0 
inserisciImpiegato	  Metodo che inserisce un impiegato all'interno del db  param i Oggetto di tipo Impiegato  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException   Metodo che inserisce un impiegato all'interno del db  invocando il relativo metodo della classe db  param newImpiegato Oggetto di tipo Impiegato  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException 
eliminaImpiegato	  Metodo che elimina un impiegato  dal db  param matr la stringa che viene utilizzato come matricola  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException   Metodo che elimina un impiegato  dal db  invocando il relativo metodo della classe db  param matricola la stringa che viene utilizzato come matricola  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException 
getImpiegatoByName	 Metodo che restituisce un insieme di impiegati  param nomeImp stringa che viene utilizzata come nome dell'impiegato  param cognImp stringa che viene utilizzata come cognome dell'impiegato  return Restituisce una Collection di Impiegati  throws DbException  Metodo che restituisce un insieme di impiegati  invocando il relativo metodo della classe db  param nomeImp stringa che viene utilizzata come nome dell'impiegato  param cognImp stringa che viene utilizzata come cognome dell'impiegato  return Restituisce una Collection di Impiegati  throws DbException 
getImpiegatoByMatricola	  Metodo che restituisce un impiegato  param matrImp stringa che viene utilizzato come matricola dell'impiegato  return Restituisce un oggetto di tipo Impiegato  throws DbException 
getImpiegati	  Metodo che restituisce tutti gli impiegati memorizzati  return Restituisce una Collection di impiegati  throws DbException   Metodo che restituisce tutti gli impiegati memorizzati  invocando il relativo metodo della classe db  return Restituisce una Collection di impiegati  throws DbException 
getImpiegatoByLogin	  Metodo che restituisce un impiegato  param log stringa che viene utilizzata come login dell'impiegato  return Restituisce un oggetto di tipo impiegato  throws DbException   Metodo che restituisce un impiegato  invocando il relativo metodo della classe db  param login stringa che viene utilizzata come login dell'impiegato  return Restituisce un oggetto di tipo impiegato  throws DbException 
modificaImpiegato	  Metodo che modifica un impiegato  param matr la stringa che identifica l'impiegato  param a impiegato con i dati aggiornati  return True se è stato effettuato una modifica nel db, False altrimenti   Metodo che modifica un impiegato  invocando il relativo metodo della classe db  param matricola la stringa che identifica l'impiegato  param newImpiegato impiegato con i dati aggiornati  return True se è stato effettuato un inserimento nel db, False altrimenti 
DbNucleoFamiliare	  La classe DbNucleoFamiliare si occupa di gestire le connessioni al db  author Antonio Leone  version 1.0 
inserisciNucleoFamiliare	  Metodo che inserisci un oggetto nucleoFamiliare nel db  param nf Oggetto di tipo nucleofamiliare  return Restituisce l'id del nucleo familiare inserito  throws DbException 
eliminaNucleoFamiliare	  Metodo che elimina un nucleoFamiliare  dal db  param id l'intero che viene utilizzato come id del nucleoFamiliare  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException 
getStatoFamiglia	  Metodo che restituisce i componeneti di uno stato di famiglia  param id intero che viene usato come id del nucleo familiare  return Restituisce una Collection di cittadini  throws DbException 
controllaIdFamiglia	  Metodo che permette di controllare lesistenza di un nucleo familiare  param id l'intero che viene utilizzato come id del nucleo familiare  return True se l'id è presente, False altrimenti  throws DbException  
noteFamiglia	  Metodo che permette la ricerca di un nucleo familiare per conoscere le eventuali note  param id l'intero che viene utilizzato come id del nucleo familiare  return Restituisce le note del nucleo familiare  throws DbException 
setCapoFamiglia	  Metodo che modifica un capo famiglia  param idF l'intero che viene utilizzato come id della famiglia  param idC l'intero che viene utilizzato come id del capo famiglia  return True se la modifica ha avuto successo, altrimenti False  throws DbException   Setta l'id del capofamiglia  returnuna stringa che contiene il nuovo id del capofamiglia   Metodo che modifica un capo famiglia  invocando il relativo metodo della classe db  param id l'intero che viene utilizzato come id della famiglia  param IdCitt l'intero che viene utilizzato come id del capo famiglia  return True se la modifica ha avuto successo, altrimenti False  throws DbException 
getNucleoFamiliareById	  Metodo che restituisce un nucleo familiare  param id l'intero che contiene l'id del nucleo familiare  return Restituisce un oggetto di tipo NucleoFamiliare  throws DbException 
setnComponenti	  Metodo che modifica il numero di componenti del nucleo familiare  param idF l'intero che viene utilizzato come id della famiglia  param n l'intero che rappresenta il nuovo numero di componenti  return True se la modifica ha avuto successo, altrimenti False  throws DbException 
DbRichiesta	  La classe DbRichiesta si occupa di gestire le connessioni al db  author Antonio Leone  version 1.0 
inserisciRichiesta	  Metodo che inserisce una richiesta all'interno del db  param ric oggetto di tipo Richiesta  return True se è stato effettuato un inserimento nel db, False altrimenti  throws DbException 
eliminaRichiesta	  Metodo che elimina una richiesta dal db  param id l'intero che viene usato come id della richiesta  return True se è stato effettuato una cancellazione nel db, False altrimenti  throws DbException 
getRichiestaById	  Metodo che restituisce una richiesta  param id l'intero che viene usato come id della richiesta  return Restituisce un oggetto di tipo Richiesta  throws DbException 
getRichiestaByRichiedente	  Metodo che restituisce un insieme di richieste  param idR l'intero che viene usato come id del richiedente  return Restituisce una Collection di Richieste  throws DbException 
getRichiestaByStato	  Metodo che restituisce un insieme di richieste  param idR l'intero che viene usato come id del richiedente  param stato la stringa che viene usata come stato della richiesta  return Restituisce una Collection di tipo Richiesta  throws DbException 
getRichiestaByTipo	  Metodo che restituisce un insieme di richieste  param idR l'intero che viene usato come id del richiedente  param tipo la stringa che viene usata come tipologia della richiesta  return Restituisce una Collection di tipo Richiesta  throws DbException 
setStatoRichiesta	  Metodo che modifica lo stato di una richiesta  param idR l'intero che viene utilizzato come id della richiesta  param stato la stringa che viene utilizzato come stato della richiesta  return True se la modifica ha avuto successo, altrimenti False  throws SQLException 
getRichieste	  Metodo che restituisce un insieme di richieste  return Restituisce una Collection di Richieste  throws DbException 
Impiegato	  La classe Impiegato permette solo all'amministratore la gestione degli impiegati  La classe Impiegato non ha dipendenze  author Federico Cinque   Costruttore vuoto della classe Impiegato   Costruttore della classe Impiegato  param Nome  param Cognome  param Matricola  param Email  param Login 
ImpiegatoManager	  La classe ImpiegatoManager interagisce con le classi di gestione del database  La classe ImpiegatoManager non ha dipendenze  author Federico Cinque   Costruttore di default della classe ImpiegatoManager 
ricercaImpiegatoByMatricola	  Metodo che restituisce un impiegato  invocando il relativo metodo della classe db  param matricola stringa che viene utilizzato come matricola dell'impiegato  return Restituisce un oggetto di tipo Impiegato  throws DbException 
NucleoFamiliare	  Questa classe si occupa di gestire lo stato di famiglia del cittadino  author Christian Ronca    Costruttore standard     param idNucleoFamiliarecontiene l'id del gruppo familiare  param capofamigliacontiene l'id del capofamiglia  param notaeventuale nota   Restituisce l'id dello stato di famiglia  returnuna stringa che contiene l'id dello stato di famiglia   Setta l'id dello stato di famiglia  returnuna stringa che contiene il nuovo id dello stato di famiglia 
getCapoFamiglia	  Restituisce l'id del capofamiglia  returnuna stringa che contiene l'id del capofamiglia 
getNote	  Restituisce le note rilasciate  returnuna stringa che contiene una nota rilasciata in precedenza 
setNote	  Inserisce una nota  returnuna stringa che contiene la nota rilasciata 
getNComponenti	  Restituisce il numero di componenti della famiglia  returnun intero che contiene il numero di componenti del nucleo familiare 
setNComponenti	  Setta il numero di componenti del nucleo familiare  returnun intero che contiene il nuovo numero di componenti del nucleo familiare 
NucleoFamiliareManager	  La classe NucleoFamiliareManager interagisce con le classi di gestione del database  La classe NucleoFamiliareManager non ha dipendenze  author Federico Cinque   Costruttore di default della classe NucleoFamiliareManager 
inserisciNucleo	  Metodo che inserisci un oggetto nucleoFamiliare nel db  invocando il relativo metodo della classe db  param nf Oggetto di tipo nucleofamiliare  return Restituisce l'id del nucleo familiare inserito  throws DbException 
controllaidFamiglia	  Metodo che permette di controllare lÕesistenza di un nucleo familiare  invocando il relativo metodo della classe db  param id l'intero che viene utilizzato come id del nucleo familiare  return True se l'id è presente, False altrimenti  throws DbException  
getNComponentiNucleo	  Metodo che restituisce il numero di componenti del nucleo familiare  invocando il relativo metodo della classe db  param id del nucleo familiare di cui si vuole il numero di componenti  return True se l'id è presente, False altrimenti  throws DbException  
incrementaComponenti	  Metodo che incrementa il numero di componenti del nucleo familiare  invocando un metodo della classe db  param id del nucleo familiare che si vuole modificare  return True se la modifica ha avuto successo, altrimenti False  throws DbException  
decrementaComponenti	  Metodo che decrementa il numero di componenti del nucleo familiare  invocando un metodo della classe db  param id del nucleo familiare che si vuole modificare  return True se la modifica ha avuto successo, altrimenti False  throws DbException  
Richiesta	  Classe che gestisce i metodi dell'oggetto Richiesta  author Christian Ronca  version 1.0   Costruttore di default   Costruttore paramentrico   param idRichiesta id della richiesta  param tipo tipo della richiesta   param data data in cui è stata effettuata la richiesta  param richiedente id del richiedente  param stato stato di avanzamento della richiesta  param documento link al documento richiesto   Costruttore paramentrico   param tipo tipo della richiesta   param data data in cui è stata effettuata la richiesta  param richiedente id del richiedente  param stato stato di avanzamento della richiesta  param documento link al documento richiesto   Preleva l'id della richiesta  returnuna stringa con l'id della richiesta   Setta un nuovo id alla richiesta  param strprende in input una stringa che contiene il nuovo id della richiesta  returnuna stringa che contiene il nuovo id 
getTipo	  Preleva il tipo di richiesta effettuata  returnuna stringa che contiene il tipo di richiesta 
setTipo	  Setta il tipo della richiesta  param strprende in input una stringa che contiene il tipo della richiesta  returnuna stringa che contiene il nuovo tipo 
getData	  Preleva la data in cui è stata fatta la richiesta  return una stringa che contiene la data della richiesta 
setData	  Setta la data alla richiesta  param strprende in input una stringa che contiene la data della richiesta  returnuna stringa che contiene la nuova data 
getRichiedente	  Preleva l'id del richiedente che ha effettuato la richiesta  returnuna stringa con l'id della richiesta 
setRichiedente	  Setta il richiedente della richiesta  param strprende in input una stringa che contiene il richiedente della richiesta  returnuna stringa che contiene il richiedente 
getStato	  Preleva lo stato della richiesta  returnuna stringa con l'id della richiesta 
setStato	  Setta lo stato della richiesta  param strprende in input una stringa che contiene la data della richiesta  returnuna stringa che contiene la nuova data 
getDocumento	  Preleva il link al documento richiesto  returnuna stringa con l'id della richiesta 
setDocumento	  Setta il link al documento  param strprende in input una stringa che contiene il link al documento richiesto  returnuna stringa che contiene il nuovo documento 
isAccettata	  Restituisce un valore booleano nel caso in cui la richiesta sia stata accettata  returntrue se la richiesta è stata accettata 
isRifiutata	  Restituisce un valore booleano nel caso in cui la richiesta sia stata rifiutata  returnfalse se la richiesta è stata rifiutata 
ServletAnnulla	  La classe ServletAnnulla annulla l'operazione che l'utente stava eseguendo  La classe ServletAnnulla non ha dipendenze  author Federico Cinque 
ServletCaricaPratica	  La classe ServletCaricaPratica carica in una sessione gli oggetti Cittadino e CartaIdentita  La classe dipende da DbCittadino e DbCartaIdentita  author Christian Ronca 
ServletCreaPdfCambioAbitazione	  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe non ha nessuna dipendenza  author Christian Ronca   La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCambioAbitazione un file PDF in base ai dati ricevuti da una pagina JSP
ServletCreaPdfCertificati	  La classe ServletCreaPdfCertificati crea un file PDF con i dati ricevuti da una pagina JSP  La classe non ha nessuna dipendenza  author Christian Ronca   La classe ServletCreaPdfCertificati crea un file PDF con i dati ricevuti da una pagina JSP
ServletCreaPdfCittadino	  La classe ServletCreaPdfCittadino un file PDF in base ai dati ricevuti da una pagina JSP  La classe non ha nessuna dipendenza  author Christian Ronca   La classe ServletCreaPdfCittadino un file PDF in base ai dati ricevuti da una pagina JSP  La classe ServletCreaPdfCittadino un file PDF in base ai dati ricevuti da una pagina JSP
ServletEliminaAmministratore	  La classe ServletEliminaAmministratore ricerca ed elimina un amministratore  La classe ServletEliminaAmministratore non ha dipendenze  author Federico Cinque   La classe ServletEliminaAmministratore ricerca ed elimina un amministratore  La classe ServletEliminaAmministratore ricerca ed elimina un amministratore  La classe ServletEliminaAmministratore ricerca ed elimina un amministratore  La classe ServletEliminaAmministratore ricerca ed elimina un amministratore  La classe ServletEliminaAmministratore ricerca ed elimina un amministratore  La classe ServletEliminaAmministratore ricerca ed elimina un amministratore  La classe ServletEliminaAmministratore ricerca ed elimina un amministratore
ServletEliminaCittadino	  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino non ha dipendenze  author Federico Cinque   La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino  La classe ServletEliminaCittadino ricerca ed elimina un cittadino
ServletEliminaImpiegato	  La classe ServletEliminaImpiegato ricerca ed elimina un impiegato  La classe ServletEliminaImpiegato non ha dipendenze  author Federico Cinque   La classe ServletEliminaImpiegato ricerca ed elimina un impiegato  La classe ServletEliminaImpiegato ricerca ed elimina un impiegato  La classe ServletEliminaImpiegato ricerca ed elimina un impiegato  La classe ServletEliminaImpiegato ricerca ed elimina un impiegato  La classe ServletEliminaImpiegato ricerca ed elimina un impiegato
ServletInserisciAmministratore	  La classe ServletInserisciAmministratore inserisce un amministratore nel database  La classe ServletInserisciAmministratore non ha dipendenze  author Federico Cinque   La classe ServletInserisciAmministratore inserisce un amministratore nel database  La classe ServletInserisciAmministratore inserisce un amministratore nel database  La classe ServletInserisciAmministratore inserisce un amministratore nel database
ServletInserisciCittadino	  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino non ha dipendenze  author Federico Cinque   La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database  La classe ServletInserisciCittadino inserisce un cittadino nel database
ServletInserisciImpiegato	  La classe ServletInserisciImpiegato inserisce un impiegato nel database  La classe ServletInserisciImpiegato non ha dipendenze  author Federico Cinque   La classe ServletInserisciImpiegato inserisce un impiegato nel database  La classe ServletInserisciImpiegato inserisce un impiegato nel database  La classe ServletInserisciImpiegato inserisce un impiegato nel database
ServletLogin	  La classe ServletLogin effettua l'operazione di autenticazione di un utente nel sistema  La classe ServletLogin non ha dipendenze  author Federico Cinque   La classe ServletLogin effettua l'operazione di autenticazione di un utente nel sistema  La classe ServletLogin effettua l'operazione di autenticazione di un utente nel sistema
ServletLogout	  La classe ServletLogout effettua l'operazione di logout di un utente dal sistema  La classe ServletLogout non ha dipendenze  author Federico Cinque 
ServletModificaAccesso	  La classe ServletModificaAccesso che effettua l'operazione di modifica di un accesso  La classe ServletModificaAccesso non ha dipendenze  author Federico Cinque   La classe ServletModificaAccesso che effettua l'operazione di modifica di un accesso  La classe ServletModificaAccesso che effettua l'operazione di modifica di un accesso  La classe ServletModificaAccesso che effettua l'operazione di modifica di un accesso  La classe ServletModificaAccesso che effettua l'operazione di modifica di un accesso  La classe ServletModificaAccesso che effettua l'operazione di modifica di un accesso
ServletModificaAmministratore	  La classe ServletModificaAmministratore che effettua l'operazione di modifica di un amministratore  La classe ServletModificaAmministratore non ha dipendenze  author Federico Cinque   La classe ServletModificaAmministratore che effettua l'operazione di modifica di un amministratore  La classe ServletModificaAmministratore che effettua l'operazione di modifica di un amministratore  La classe ServletModificaAmministratore che effettua l'operazione di modifica di un amministratore  La classe ServletModificaAmministratore che effettua l'operazione di modifica di un amministratore
ServletModificaCittadino	  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino non ha dipendenze  author Federico Cinque   La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino  La classe ServletModificaCittadino che effettua l'operazione di modifica di un cittadino
ServletModificaImpiegato	  La classe ServletModificaImpiegato che effettua l'operazione di modifica di un impiegato  La classe ServletModificaImpiegato non ha dipendenze  author Federico Cinque   La classe ServletModificaImpiegato che effettua l'operazione di modifica di un impiegato  La classe ServletModificaImpiegato che effettua l'operazione di modifica di un impiegato  La classe ServletModificaImpiegato che effettua l'operazione di modifica di un impiegato  La classe ServletModificaImpiegato che effettua l'operazione di modifica di un impiegato
CercaFiles	  metodo che cerca i file contenenti  le richieste di cambio di residenza  da parte dei cittadini.Tale cartella viene  salvata sul server su cui l'impiegato  può accedervi per reperire le informazioni  utili alla compilazione del modulo  che deve essere registrato all'interno  dell'archivio comunale    from è la cartella in cui cercare il  file di nome "nome" e di tipo ".pdf"  param from  param nome  param tipo   se la sessione è stata creata correttamente   all'accesso dell'impiegato, viene mandato in exe  il metodo che controlla se sono presenti file pdf  riguardanti il cambio di residenza interno o  esterno richiesti dai cittadini    (1)cosa deve fare la servlet:  deve prendere l'id del cittadino  di cui ha inserito il codice della carta di identità  dal form e lo passa al metodo main   per cercare il file corrispondente   (2)il codice della carta di identità e la data della richiesta  li prende con request.getParameter  salvandoli nelle apposite variabili,  dopodichè viene chiamato il metodo che restituisce  l'id di un cittadino dopo avergli   passato nome, cognome e codice_fiscale di  quest'ultimo.   una volta salvati i parametri, li passo  al metodo che restituisce l'id di questo  particolare cittadino che ha inviato la  richiesta di cambio di residenza e di cui  se ne vuole cercare il file    una volta conosciuto l'id del cittadino  lo passo al metodo di ricerca del file  ad esso corrispondente 
init	public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{public void init(ServletConfig conf)throws ServletException{
ServletMostraAccesso	  La classe ServletMostraAccesso mostra i dati relativi all'accesso di un impieagto o amministratore  La classe ServletMostraAccesso non ha dipendenze  author Federico Cinque   La classe ServletMostraAccesso mostra i dati relativi all'accesso di un impieagto o amministratore
ServletMostraAccessoA	  La classe ServletMostraAccessoA mostra i dati relativi all'accesso di un cittadino  La classe ServletMostraAccessoA non ha dipendenze  author Federico Cinque 
ServletRecuperoPassword	  La classe ServletRecuperoPassword gestisce l'operazione di recupero password per un cittadino  La classe ServletRecuperoPassword non ha dipendenze  author Federico Cinque   La classe ServletRecuperoPassword gestisce l'operazione di recupero password per un cittadino  La classe ServletRecuperoPassword gestisce l'operazione di recupero password per un cittadino  La classe ServletRecuperoPassword gestisce l'operazione di recupero password per un cittadino  La classe ServletRecuperoPassword gestisce l'operazione di recupero password per un cittadino
ServletRegistraCittadino	  La classe ServletRegistraCittadino gestisce l'operazione di registrazione   di un cittadino nel sistema  La classe ServletRegistraCittadino non ha dipendenze  author Federico Cinque 
ServletRicercaAmministratore	  La classe ServletRicercaAmministratore ricerca e restituisce i dati di un amministratore  La classe ServletRicercaAmministratore non ha dipendenze  author Federico Cinque 
ServletRicercaCittadino	  La classe ServletRicercaCittadino ricerca e restituisce i dati di un cittadino  La classe ServletRicercaCittadino non ha dipendenze  author Federico Cinque 
ServletRicercaImpiegato	  La classe ServletRicercaImpiegato ricerca e restituisce i dati di un impiegato  La classe ServletRicercaImpiegato non ha dipendenze  author Federico Cinque 
ServletRicercaPratica	  La classe ServletRicercaPratica restituisce una pratica specificata nel motore di ricerca  La classe dipende dalla classe DbRichieste  author Christian Ronca   La classe ServletRicercaPratica restituisce una pratica specificata nel motore di ricerca
doPost	  servlet di risposta lato server destinata al client 
ServletRisposta	public class ServletRisposta extends HttpServlet{public class ServletRisposta extends HttpServlet{
ServletStatoDiFamiglia	  La classe ServletStatoDiFamiglia restituisce una lista dei membri di una famiglia  La classe dipende dalla classe DbNucleoFamiliare  author Christian Ronca   La classe ServletStatoDiFamiglia restituisce una lista dei membri di una famiglia  La classe ServletStatoDiFamiglia restituisce una lista dei membri di una famiglia  La classe ServletStatoDiFamiglia restituisce una lista dei membri di una famiglia
ServletVisualizzaPratiche	  La classe ServletVisualizzaPratiche restituisce una lista di richieste  La classe dipende dalla classe DbRichieste  author Christian Ronca   La classe ServletVisualizzaPratiche restituisce una lista di richieste
